<!--style>

  body {
    font: 10px sans-serif;
  }

  .chart { 
    background: #fff;
  }

  p {
    font: 12px helvetica;
  }


  .axis path, .axis line {
    fill: none;
    stroke: #000;
    stroke-width: 2px;
    shape-rendering: crispEdges;
  }

  }

</style-->
<style>

  p {
    font: 12px helvetica;
  }

  .axis path, .axis line {
    fill: none;
    stroke: #000;
    stroke-width: 2px;
    shape-rendering: crispEdges;
  }

  .axis text {
    font: 10px sans-serif;
  }
  
</style>
<!--script src="http://d3js.org/d3.v2.js"></script-->


#*
#if($response.response.facet_counts.facet_pivot)
#set($pivots = $response.response.facet_counts.facet_pivot)
#if($pivots.size() > 0)
      #foreach ($pivot in $pivots)
        #foreach ($entry in $pivot.value)
          #if ($entry.field=="publication_year")              
          <a href="#url_for_facet_filter($entry.field, $entry.value)">$entry.field::$entry.value</a> ($entry.count)
          <ul>
            #foreach($nest in $entry.pivot)
              <a href="#url_for_facet_filter($entry.field, $entry.value)&fq=$esc.url($nest.field):%22$esc.url($nest.value)%22">$nest.field::$nest.value</a> ($nest.count)
            #end
          </ul>
          #end
        #end
      #end
    </ul>
#end
#end
*#

#if($response.response.facet_counts.facet_pivot)
#set($pivots = $response.response.facet_counts.facet_pivot)
#if($pivots.size() > 0)
<div class="stream_chart">
</div>
<script>
var class_names = {};

      //get min and max years
      #set( $minyear = 10000 )
      #set( $maxyear = 0 )
      #set($Integer = 0)
      #foreach ($pivot in $pivots)
        #foreach ($entry in $pivot.value)
          #if ($entry.field=="publication_year")              
	    #set($tmp = $Integer.parseInt($entry.value))
	    #if($tmp<$minyear)
             #set($minyear = $tmp)
            #end
            #if($tmp>$maxyear)
             #set($maxyear = $tmp)
            #end
          #end
        #end
       #end
      
      // allocate arrays for streams
      classes = {};
      #foreach ($pivot in $pivots)
        #foreach ($entry in $pivot.value)
          #if ($entry.field=="publication_year")        
            #foreach($nest in $entry.pivot)
		classes["$nest.value"] = [#foreach($i in [$minyear..$maxyear])#if($foreach.index>  0),#end 0 #end];
    #set($full_class_name = $ipc_sections_titles.get($nest.value))
                class_names["$nest.value"] = "$full_class_name"
            #end
          #end
        #end
      #end

      // fill streams with counts
      #foreach ($pivot in $pivots)
        #foreach ($entry in $pivot.value)
          #if ($entry.field=="publication_year")        
            #foreach($nest in $entry.pivot)
		classes["$nest.value"][$Integer.parseInt($entry.value)-$minyear] = $nest.count;
            #end
          #end
        #end
      #end

chart("orange");

function chart(color) {

var datearray = [];
var colorrange = [];

var highlightcolor = "rgb(0, 0, 0)";

var data = [];
var years = [];
var values = [];
var keys = [];

i = 0;
var start = parseInt("$minyear");
for(var key in classes) {
var current = parseInt("$minyear");
for(var year in classes[key]) {
  keys[i] = key;
  years[i] = "01/01/"+current;
  values[i] = classes[key][current-start];
  current++;
  i++;  
}
}
var data = years.map(function (_, i) {
		    return {"key":""+keys[i],"value":""+values[i], "date":years[i]};
		});

if (color == "blue") {
  colorrange = ["#045A8D", "#2B8CBE", "#74A9CF", "#A6BDDB", "#D0D1E6", "#F1EEF6"];
}
else if (color == "pink") {
  colorrange = ["#980043", "#DD1C77", "#DF65B0", "#C994C7", "#D4B9DA", "#F1EEF6"];
}
else if (color == "orange") {
  colorrange = d3.scale.category20().range();//["#B30000", "#E34A33", "#FC8D59", "#FDBB84", "#FDD49E", "#FEF0D9"];
}
strokecolor = colorrange[0];

var format = d3.time.format("%m/%d/%Y");
var margin = {top: 5, right: 60, bottom: 20, left: 50};
var width = document.getElementById('stream_graph_pane').clientWidth - margin.left - margin.right;
var height = document.getElementById('stream_graph_pane').clientHeight - margin.top - margin.bottom;
//var margin = {top: 5, right: 5, bottom: 20, left: 30};
//var width = 1000;
//var height = 500;

var tooltip = d3.select("body")
    .append("div")
    .attr("class", "remove")
    .style("position", "absolute")
    .style("z-index", "20")
    .style("visibility", "hidden")
    .style("top", "200px")
    .style("left", "260px");

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height-10, 0]);

var z = d3.scale.ordinal()
    .range(colorrange);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(d3.time.years,2)

var yAxis = d3.svg.axis()
    .scale(y);

var yAxisr = d3.svg.axis()
    .scale(y);

var stack = d3.layout.stack()
    .offset("silhouette")
    .values(function(d) { return d.values; })
    .x(function(d) { return d.date; })
    .y(function(d) { return d.value; });

var nest = d3.nest()
    .key(function(d) { return d.key; });

var area = d3.svg.area()
    .interpolate("cardinal")
    .x(function(d) { return x(d.date); })
    .y0(function(d) { return y(d.y0); })
    .y1(function(d) { return y(d.y0 + d.y); });

var svg = d3.select(".stream_chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var graph = 
  data.forEach(function(d) {
    d.date = format.parse(d.date);
    d.value = +d.value;
  });
  
  var layers = stack(nest.entries(data));

  x.domain(d3.extent(data, function(d) { return d.date; }));
  y.domain([0, d3.max(data, function(d) { return d.y0 + d.y; })]);

  var layer = svg.selectAll(".layer");

  layer.data(layers)
        .enter().append("path")
        .attr("class", "layer")
        .attr("d", function(d) { return area(d.values); })
        .attr("id", function(d,i) { return "sem_stream"+i; })        
        .style("fill", function(d, i) { 
          #foreach($fq in $params.getParams('fqs'))
            if("class:"+d.key=="$fq")
              return highlightcolor;
          #end
          return z(i); 
        });


  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .attr("transform", "translate(" + width + ", 0)")
      .call(yAxis.orient("right"));

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis.orient("left"));

  svg.selectAll(".layer")
    .attr("opacity", 1)
    .on("mouseover", function(d, i) {
      svg.selectAll(".layer").transition()
      .duration(250)
      .attr("opacity", function(d, j) {
        return j != i ? 0.6 : 1;
    })})

    .on("mousemove", function(d, i) {
      mousex = d3.mouse(this);
      mousex = mousex[0];
      var invertedx = x.invert(mousex);
      invertedx = invertedx.getYear();//invertedx.getMonth() + invertedx.getDate();
      var selected = (d.values);
      for (var k = 0; k < selected.length; k++) {
        datearray[k] = selected[k].date
        datearray[k] = datearray[k].getYear();//datearray[k].getMonth() + datearray[k].getDate();
      }

      mousedate = datearray.indexOf(invertedx);
      pro = d.values[mousedate].value;
      year = d.values[mousedate].date.getFullYear();
      key = d.key
      d3.select(this)
      .classed("hover", true)
      .attr("stroke", strokecolor)
      .attr("stroke-width", "0.5px"), 
      tooltip.html( "<p>" + pro + "<br>" + key + " (" + class_names[key] + ")<br>" + year + "</p>" ).style("visibility", "visible").style("left", (d3.event.pageX+10) + "px").style("top", (d3.event.pageY - 28) + "px");
      
    })
    .on("mouseout", function(d, i) {
     svg.selectAll(".layer")
      .transition()
      .duration(250)
      .attr("opacity", "1");
      d3.select(this)
      .classed("hover", false)
      .attr("stroke-width", "0px"), tooltip.html( "<p>" + pro + "<br>" + key + "<br>" + year + "</p>" ).style("visibility", "hidden").style("left", (d3.event.pageX+10) + "px").style("top", (d3.event.pageY - 28) + "px");
  })
    #if($analytic=="landscape")
    .on("click",function(d, i) {      
      var stream = svg.selectAll("#sem_stream"+i);
      if(stream.style("fill")==highlightcolor) { // remove highlight and remove filter
        ##stream.style("fill", z(i));
        ##window.location.href = window.location.href.replace("&fqs=class:"+d.key+"&","");
      }
      else { // highlight and filter
        ##stream.style("fill", function() { highlightcolor });        
        ##window.location.href = window.location.href+"&fqs=class:"+d.key+"&";##+"&sem_concepts=$!esc.url($response.response.semantic_concepts)";
      }
    })
    #end
  /*  
  var vertical = d3.select(".stream_chart")
        .append("div")
        .attr("class", "remove")
        .style("position", "absolute")
        .style("z-index", "19")
        .style("width", "1px")
        .style("height", "380px")
        .style("top", "10px")
        .style("bottom", "30px")
        .style("left", "0px")
        .style("background", "#ccc");

  d3.select(".stream_chart")
      .on("mousemove", function(){  
         mousex = d3.mouse(this);
         mousex = mousex[0] + 5;
         vertical.style("left", mousex + "px" )})
      .on("mouseover", function(){  
         mousex = d3.mouse(this);
         mousex = mousex[0] + 5;
         vertical.style("left", mousex + "px")});*/
}

</script>

#end
#end

